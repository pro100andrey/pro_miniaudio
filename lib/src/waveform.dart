part of 'library.dart';

/// A class for generating and managing waveforms.
///
/// The `Waveform` class provides an interface for creating various types of
/// audio waveforms (sine, square, sawtooth, triangle) and reading PCM frames
/// generated by the waveform.
///
/// Example usage:
/// ```dart
/// final waveform = Waveform(
///   config: WaveformSineConfig(
///     format: SampleFormat.f32,
///     sampleRate: 44100,
///     channels: 2,
///     amplitude: 1.0,
///     frequency: 440.0,
///   ),
/// );
///
/// final pcmFrames = waveform.readWaveformPcmFrames(frameCount: 1024);
/// print('Read ${pcmFrames.framesRead} frames');
///
/// waveform.dispose();
/// ```
final class Waveform extends NativeResource<Void> {
  /// Creates a new waveform instance based on the provided configuration.
  ///
  /// - [config]: A configuration object that defines the waveform type,
  ///   format, sample rate, channels, amplitude, and frequency.
  ///
  /// Throws an exception if the waveform creation fails.
  ///
  /// Example:
  /// ```dart
  /// final waveform = Waveform(
  ///   config: WaveformSineConfig(
  ///     format: SampleFormat.f32,
  ///     sampleRate: 44100,
  ///     channels: 2,
  ///     amplitude: 1.0,
  ///     frequency: 440.0,
  ///   ),
  /// );
  /// ```
  factory Waveform({required BaseWaveformConfig config}) {
    final cfg = config;

    final rWaveform = switch (cfg) {
      WaveformSineConfig() => _bindings.waveform_create(
          cfg.sampleFormat.toNative(),
          cfg.channels,
          cfg.sampleRate,
          cfg.type.toNative(),
          cfg.amplitude,
          cfg.frequency,
        ),
      WaveformSquareConfig() => _bindings.waveform_create(
          cfg.sampleFormat.toNative(),
          cfg.channels,
          cfg.sampleRate,
          cfg.type.toNative(),
          cfg.amplitude,
          cfg.frequency,
        ),
      WaveformSawtoothConfig() => _bindings.waveform_create(
          cfg.sampleFormat.toNative(),
          cfg.channels,
          cfg.sampleRate,
          cfg.type.toNative(),
          cfg.amplitude,
          cfg.frequency,
        ),
      WaveformTriangleConfig() => _bindings.waveform_create(
          cfg.sampleFormat.toNative(),
          cfg.channels,
          cfg.sampleRate,
          cfg.type.toNative(),
          cfg.amplitude,
          cfg.frequency,
        ),
    };

    final waveform = Waveform._(rWaveform, cfg);

    return waveform;
  }

  /// Internal constructor.
  Waveform._(super.ptr, this.config) : super._();

  /// The waveform configuration used for generating PCM frames.
  final BaseWaveformConfig config;

  @protected
  @override
  NativeFinalizer get finalizer => Library.waveformFinalizer;

  @protected
  @override
  void releaseResource() => _bindings.waveform_destroy(
        ensureIsNotFinalized(),
      );

  /// Reads PCM frames from the waveform generator.
  ///
  /// - [frameCount]: The number of frames to read from the waveform.
  ///
  /// Returns:
  /// A Record containing the frames read and the number of
  /// frames successfully generated.
  ///
  /// Throws an exception if the waveform is not initialized or if the operation
  ///  fails.
  ///
  /// Example:
  /// ```dart
  /// final pcmFrames = waveform.readWaveformPcmFrames(frameCount: 1024);
  /// print('Read ${pcmFrames.framesRead} frames');
  /// ```
  ({TypedData frames, int framesRead}) readWaveformPcmFrames({
    required int frameCount,
  }) {
    final resource = ensureIsNotFinalized();

    final pFramesOut = malloc.allocate(frameCount * config.bpf);
    final pFramesRead = malloc<Uint64>();

    try {
      _bindings.waveform_read_pcm_frames_with_buffer(
        resource,
        pFramesOut.cast(),
        frameCount,
        pFramesRead,
      );

      final framesRead = pFramesRead.value;
      final size = framesRead * config.channels;

      final frames = switch (config.sampleFormat) {
        SampleFormat.f32 => pFramesOut
            .cast<Float>()
            .asTypedList(size, finalizer: malloc.nativeFree),
        SampleFormat.s16 => pFramesOut
            .cast<Int16>()
            .asTypedList(size, finalizer: malloc.nativeFree),
        SampleFormat.s32 || SampleFormat.s24 => pFramesOut
            .cast<Int32>()
            .asTypedList(size, finalizer: malloc.nativeFree),
        SampleFormat.u8 => pFramesOut
            .cast<Uint8>()
            .asTypedList(size, finalizer: malloc.nativeFree),
        _ =>
          throw Exception('Unsupported sample format: ${config.sampleFormat}'),
      };

      return (frames: frames, framesRead: framesRead);
    } finally {
      malloc.free(pFramesRead);
    }
  }
}
