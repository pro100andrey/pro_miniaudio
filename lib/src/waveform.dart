import 'dart:ffi' as ffi;
import 'dart:typed_data';

import 'package:ffi/ffi.dart';

import 'generated/bindings.dart';
import 'library.dart';
import 'models/waveform_config.dart';

/// A class for generating and managing waveforms.
///
/// The `Waveform` class provides an interface for creating various types of
/// audio waveforms (sine, square, sawtooth, triangle) and reading PCM frames
/// generated by the waveform.
///
/// Example usage:
/// ```dart
/// final waveform = Waveform(
///   config: WaveformSineConfig(
///     format: SampleFormat.f32,
///     sampleRate: 44100,
///     channels: 2,
///     amplitude: 1.0,
///     frequency: 440.0,
///   ),
/// );
///
/// final pcmFrames = waveform.readWaveformPcmFrames(frameCount: 1024);
/// print('Read ${pcmFrames.framesRead} frames');
///
/// waveform.dispose();
/// ```
final class Waveform {
  /// Creates a new waveform instance based on the provided configuration.
  ///
  /// - [config]: A configuration object that defines the waveform type,
  ///   format, sample rate, channels, amplitude, and frequency.
  ///
  /// Throws an exception if the waveform creation fails.
  ///
  /// Example:
  /// ```dart
  /// final waveform = Waveform(
  ///   config: WaveformSineConfig(
  ///     format: SampleFormat.f32,
  ///     sampleRate: 44100,
  ///     channels: 2,
  ///     amplitude: 1.0,
  ///     frequency: 440.0,
  ///   ),
  /// );
  /// ```
  Waveform({required this.config}) {
    final cfg = config;

    final rWaveform = switch (cfg) {
      WaveformSineConfig() => _bindings.waveform_create(
          cfg.format.toNative(),
          cfg.channels,
          cfg.sampleRate,
          cfg.type.toNative(),
          cfg.amplitude,
          cfg.frequency,
        ),
      WaveformSquareConfig() => _bindings.waveform_create(
          cfg.format.toNative(),
          cfg.channels,
          cfg.sampleRate,
          cfg.type.toNative(),
          cfg.amplitude,
          cfg.frequency,
        ),
      WaveformSawtoothConfig() => _bindings.waveform_create(
          cfg.format.toNative(),
          cfg.channels,
          cfg.sampleRate,
          cfg.type.toNative(),
          cfg.amplitude,
          cfg.frequency,
        ),
      WaveformTriangleConfig() => _bindings.waveform_create(
          cfg.format.toNative(),
          cfg.channels,
          cfg.sampleRate,
          cfg.type.toNative(),
          cfg.amplitude,
          cfg.frequency,
        ),
    };

    final result = FFResult<ffi.Void>(rWaveform)..throwIfError();

    _pWaveform = result.data;
  }

  /// The waveform configuration used for generating PCM frames.
  final BaseWaveformConfig config;

  /// Internal pointer to the native waveform instance.
  ///
  /// This pointer is managed by the native library and must be properly
  /// disposed of using the [dispose] method.
  ffi.Pointer<ffi.Void>? _pWaveform;

  /// Provides access to the native bindings for waveform operations.
  ProMiniaudioBindings get _bindings => Library.instance.bindings;

  /// Reads PCM frames from the waveform generator.
  ///
  /// - [frameCount]: The number of frames to read from the waveform.
  ///
  /// Returns:
  /// A Record containing the frames read and the number of
  /// frames successfully generated.
  ///
  /// Throws an exception if the waveform is not initialized or if the operation
  ///  fails.
  ///
  /// Example:
  /// ```dart
  /// final pcmFrames = waveform.readWaveformPcmFrames(frameCount: 1024);
  /// print('Read ${pcmFrames.framesRead} frames');
  /// ```
  ({Float32List frames, int framesRead}) readWaveformPcmFrames({
    required int frameCount,
  }) {
    if (_pWaveform == null) {
      throw Exception('Waveform is not initialized');
    }

    final bytesPerFrame = _bindings.get_bytes_per_frame(
      config.format.toNative(),
      config.channels,
    );

    final pFramesOut = malloc.allocate<ffi.Void>(frameCount * bytesPerFrame);
    final pFramesRead = malloc.allocate<ffi.Uint64>(1);

    try {
      FFResult<ffi.Void>(
        _bindings.waveform_read_pcm_frames_with_buffer(
          _pWaveform!,
          pFramesOut,
          frameCount,
          pFramesRead,
        ),
      ).throwIfError();

      final framesRead = pFramesRead.value;
      final frames = pFramesOut
          .cast<ffi.Float>()
          .asTypedList(framesRead * config.channels);
      final result = Float32List.fromList(frames);

      return (frames: result, framesRead: framesRead);
    } finally {
      malloc
        ..free(pFramesRead)
        ..free(pFramesOut);
    }
  }

  /// Disposes of the waveform generator, releasing associated resources.
  ///
  /// This method must be called when the waveform instance is no longer needed
  /// to ensure proper cleanup of native resources.
  ///
  /// Example:
  /// ```dart
  /// waveform.dispose();
  /// ```
  void dispose() {
    if (_pWaveform == null) {
      return;
    }

    _bindings.waveform_destroy(_pWaveform!);

    _pWaveform = null;
  }
}
